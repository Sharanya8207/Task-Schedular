import java.util.*;


enum Priority {
    HIGH, MEDIUM, LOW
}


class Task {
    String description;
    Priority priority;

    Task(String description, Priority priority) {
        this.description = description;
        this.priority = priority;
    }

    
    public String toString() {
        return "[" + priority + "] " + description;
    }
}

public class TaskScheduler {

    
    private PriorityQueue<Task> taskQueue = new PriorityQueue<>((a, b) -> b.priority.ordinal() - a.priority.ordinal());
    private Stack<Task> completedTasks = new Stack<>();

    
    public void addTask(String description, Priority priority) {
        taskQueue.offer(new Task(description, priority));
        System.out.println(" Task added: " + description);
    }

    
    public void showPendingTasks() {
        if (taskQueue.isEmpty()) {
            System.out.println(" No pending tasks!");
            return;
        }

        System.out.println(" Pending Tasks:");
        for (Task task : taskQueue) {
            System.out.println("- " + task);
        }
    }

   
    public void completeTask() {
        if (taskQueue.isEmpty()) {
            System.out.println("No tasks to complete!");
            return;
        }

        Task completed = taskQueue.poll();
        completedTasks.push(completed);
        System.out.println(" Completed: " + completed);
    }

    
    public void undoTask() {
        if (completedTasks.isEmpty()) {
            System.out.println("No task to undo!");
            return;
        }

        Task undone = completedTasks.pop();
        taskQueue.offer(undone);
        System.out.println(" Undo completed: " + undone);
    }

    
    public void run() {
        Scanner sc = new Scanner(System.in);
        while (true) {
            System.out.println("\n==== Task Scheduler ====");
            System.out.println("1. Add Task");
            System.out.println("2. Show Pending Tasks");
            System.out.println("3. Complete Task");
            System.out.println("4. Undo Last Task");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");

            int choice = Integer.parseInt(sc.nextLine());

            switch (choice) {
                case 1:
                    System.out.print("Enter task description: ");
                    String desc = sc.nextLine();
                    System.out.print("Enter priority (HIGH / MEDIUM / LOW): ");
                    String p = sc.nextLine().toUpperCase();
                    try {
                        Priority pr = Priority.valueOf(p);
                        addTask(desc, pr);
                    } catch (IllegalArgumentException e) {
                        System.out.println("Invalid priority. Try again.");
                    }
                    break;

                case 2:
                    showPendingTasks();
                    break;

                case 3:
                    completeTask();
                    break;

                case 4:
                    undoTask();
                    break;

                case 5:
                    System.out.println(" Exiting...");
                    return;

                default:
                    System.out.println(" Invalid choice. Try again.");
            }
        }
    }

    
    public static void main(String[] args) {
        new TaskScheduler().run();
    }
}
